import { PrismaClient } from "@prisma/client";

const prisma = new PrismaClient();

async function verificarCierreTingo() {
  console.log("üîç VERIFICANDO CIERRE DE CAJA - EL TINGO");
  console.log("============================================================");

  try {
    // Buscar el punto EL TINGO
    const punto = await prisma.puntoAtencion.findFirst({
      where: {
        nombre: { contains: "TINGO", mode: "insensitive" },
      },
    });

    if (!punto) {
      console.log("‚ùå No se encontr√≥ el punto EL TINGO");
      return;
    }

    // Buscar el operador
    const operador = await prisma.usuario.findFirst({
      where: {
        punto_atencion_id: punto.id,
        rol: "OPERADOR",
        activo: true,
      },
    });

    if (!operador) {
      console.log("‚ùå No se encontr√≥ operador activo para EL TINGO");
      return;
    }

    console.log(`‚úÖ Operador: ${operador.nombre}`);
    console.log(`üìç Punto: ${punto.nombre}`);

    // Verificar fecha de hoy
    const hoy = new Date();
    hoy.setHours(0, 0, 0, 0);
    const ma√±ana = new Date(hoy);
    ma√±ana.setDate(ma√±ana.getDate() + 1);

    console.log(`üìÖ Verificando para fecha: ${hoy.toLocaleDateString()}`);

    // 1. Verificar si ya existe un cierre de caja para hoy
    const cierreHoy = await prisma.cierreDiario.findFirst({
      where: {
        punto_atencion_id: punto.id,
        fecha: {
          gte: hoy,
          lt: ma√±ana,
        },
      },
      include: {
        usuario: {
          select: {
            nombre: true,
          },
        },
      },
    });

    console.log("\nüí∞ CIERRE DE CAJA HOY:");
    console.log("----------------------------------------");
    if (cierreHoy) {
      console.log("‚ùå YA EXISTE UN CIERRE DE CAJA PARA HOY");
      console.log(`üÜî ID: ${cierreHoy.id}`);
      console.log(`üë§ Realizado por: ${cierreHoy.usuario.nombre}`);
      console.log(`üïê Fecha: ${cierreHoy.fecha}`);
      console.log(`üìã Estado: ${cierreHoy.estado}`);
      console.log(`üïê Fecha cierre: ${cierreHoy.fecha_cierre || "No cerrado"}`);
      console.log(`üìù Observaciones: ${cierreHoy.observaciones || "Ninguna"}`);
      console.log("\n‚ö†Ô∏è PROBLEMA: No se puede hacer otro cierre el mismo d√≠a");
      return;
    } else {
      console.log("‚úÖ No hay cierre de caja para hoy - Se puede proceder");
    }

    // 2. Verificar jornada activa
    const jornadaHoy = await prisma.jornada.findFirst({
      where: {
        usuario_id: operador.id,
        fecha_inicio: {
          gte: hoy,
          lt: ma√±ana,
        },
      },
    });

    console.log("\nüìÖ JORNADA:");
    console.log("----------------------------------------");
    if (jornadaHoy) {
      console.log(`‚úÖ Jornada encontrada - Estado: ${jornadaHoy.estado}`);
      const esValida =
        jornadaHoy.estado === "ACTIVO" || jornadaHoy.estado === "ALMUERZO";
      console.log(
        `üîç ¬øEstado v√°lido para cierre? ${esValida ? "‚úÖ S√ç" : "‚ùå NO"}`
      );
    } else {
      console.log("‚ùå No hay jornada para hoy");
      return;
    }

    // 3. Verificar transacciones del d√≠a (servicios externos)
    const transaccionesHoy = await prisma.servicioExternoMovimiento.findMany({
      where: {
        punto_atencion_id: punto.id,
        fecha: {
          gte: hoy,
          lt: ma√±ana,
        },
      },
      include: {
        moneda: {
          select: {
            nombre: true,
            simbolo: true,
          },
        },
      },
      orderBy: {
        fecha: "desc",
      },
    });

    console.log("\nüíº TRANSACCIONES HOY:");
    console.log("----------------------------------------");
    console.log(`üìä Total transacciones: ${transaccionesHoy.length}`);

    if (transaccionesHoy.length > 0) {
      transaccionesHoy.forEach((t, index) => {
        console.log(
          `${index + 1}. ${t.servicio} - ${t.moneda.simbolo}${t.monto} (${
            t.fecha
          }) - ${t.tipo_movimiento}`
        );
        if (t.descripcion) {
          console.log(`   üìù ${t.descripcion}`);
        }
        if (t.numero_referencia) {
          console.log(`   üî¢ Ref: ${t.numero_referencia}`);
        }
      });

      // Calcular totales por servicio
      const totalPorServicio = transaccionesHoy.reduce((acc, t) => {
        const servicio = t.servicio;
        if (!acc[servicio]) {
          acc[servicio] = 0;
        }
        acc[servicio] += Number(t.monto);
        return acc;
      }, {} as Record<string, number>);

      console.log("\nüí∞ RESUMEN POR SERVICIO:");
      console.log("----------------------------------------");
      Object.entries(totalPorServicio).forEach(([servicio, total]) => {
        console.log(`${servicio}: $${total}`);
      });

      const totalGeneral = transaccionesHoy.reduce(
        (sum, t) => sum + Number(t.monto),
        0
      );
      console.log(`üìä Total general: $${totalGeneral}`);
    } else {
      console.log("‚ÑπÔ∏è No hay transacciones de servicios externos para hoy");
    }

    // 4. Verificar si el usuario tiene permisos
    console.log("\nüë§ PERMISOS DE USUARIO:");
    console.log("----------------------------------------");
    console.log(`üîë Rol: ${operador.rol}`);
    console.log(`‚úÖ Activo: ${operador.activo}`);
    console.log(`üìç Punto asignado: ${punto.nombre}`);
    console.log(
      `üîç ¬øEs OPERADOR? ${operador.rol === "OPERADOR" ? "‚úÖ S√ç" : "‚ùå NO"}`
    );

    // 5. Verificar configuraci√≥n del punto
    console.log("\nüè¢ CONFIGURACI√ìN DEL PUNTO:");
    console.log("----------------------------------------");
    console.log(`‚úÖ Punto activo: ${punto.activo}`);
    console.log(`üìç Nombre: ${punto.nombre}`);
    console.log(`üÜî ID: ${punto.id}`);

    console.log("\nüéØ DIAGN√ìSTICO FINAL:");
    console.log("============================================================");

    const problemas = [];

    if (cierreHoy) {
      problemas.push("Ya existe un cierre de caja para hoy");
    }

    if (
      !jornadaHoy ||
      (jornadaHoy.estado !== "ACTIVO" && jornadaHoy.estado !== "ALMUERZO")
    ) {
      problemas.push("No hay jornada activa v√°lida");
    }

    if (operador.rol !== "OPERADOR") {
      problemas.push("El usuario no tiene rol de OPERADOR");
    }

    if (!operador.activo) {
      problemas.push("El usuario no est√° activo");
    }

    if (!punto.activo) {
      problemas.push("El punto de atenci√≥n no est√° activo");
    }

    if (problemas.length === 0) {
      console.log("‚úÖ TODOS LOS REQUISITOS SE CUMPLEN");
      console.log("El operador deber√≠a poder realizar el cierre de caja");
      console.log("\nüí° POSIBLES CAUSAS DEL PROBLEMA:");
      console.log("1. Error en el frontend (cache, JavaScript)");
      console.log("2. Error en la API del servidor");
      console.log("3. Problema de conectividad");
      console.log("4. Validaci√≥n adicional no contemplada");
    } else {
      console.log("‚ùå PROBLEMAS ENCONTRADOS:");
      problemas.forEach((problema, index) => {
        console.log(`${index + 1}. ${problema}`);
      });
    }
  } catch (error) {
    console.error("‚ùå Error al verificar cierre:", error);
  } finally {
    await prisma.$disconnect();
  }
}

verificarCierreTingo();
