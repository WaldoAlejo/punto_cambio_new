
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============================
// Modelos principales
// ============================

model Usuario {
  id                String     @id @default(uuid())
  username          String     @unique
  password          String
  rol               RolUsuario
  nombre            String
  correo            String?    @unique
  telefono          String?
  activo            Boolean    @default(true)
  punto_atencion_id String?
  created_at        DateTime   @default(now())
  updated_at        DateTime   @updatedAt

  // Relaciones
  puntoAtencion             PuntoAtencion?   @relation(fields: [punto_atencion_id], references: [id], onDelete: SetNull)
  jornadas                  Jornada[]
  cambios                   CambioDivisa[]
  movimientos               Movimiento[]
  solicitudes               SolicitudSaldo[]
  cuadresCaja               CuadreCaja[]
  historialSaldos           HistorialSaldo[]
  transferenciasAprobadas   Transferencia[]  @relation("UsuarioAprobador")
  transferenciasSolicitadas Transferencia[]  @relation("UsuarioSolicitante")
  transferenciasRechazadas  Transferencia[]  @relation("UsuarioRechazador")
  recibos                   Recibo[]
  salidasEspontaneas        SalidaEspontanea[]
  salidasAprobadas          SalidaEspontanea[] @relation("UsuarioAprobadorSalida")

  @@index([username])
  @@index([punto_atencion_id])
}

model PuntoAtencion {
  id            String   @id @default(uuid())
  nombre        String
  direccion     String
  ciudad        String
  provincia     String
  codigo_postal String?
  telefono      String?
  activo        Boolean  @default(true)
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt

  // Relaciones
  usuarios              Usuario[]
  saldos                Saldo[]
  jornadas              Jornada[]
  cambios               CambioDivisa[]
  movimientos           Movimiento[]
  solicitudes           SolicitudSaldo[]
  transferenciasOrigen  Transferencia[]  @relation("TransferenciasOrigen")
  transferenciasDestino Transferencia[]  @relation("TransferenciasDestino")
  cuadresCaja           CuadreCaja[]
  historialSaldos       HistorialSaldo[]
  recibos               Recibo[]
  salidasEspontaneas    SalidaEspontanea[]

  @@index([ciudad])
  @@index([activo])
}

model Moneda {
  id            String   @id @default(uuid())
  nombre        String
  simbolo       String
  codigo        String   @unique
  activo        Boolean  @default(true)
  orden_display Int      @default(0)
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt

  // Relaciones
  saldos          Saldo[]
  cambiosOrigen   CambioDivisa[]      @relation("MonedaOrigen")
  cambiosDestino  CambioDivisa[]      @relation("MonedaDestino")
  movimientos     Movimiento[]
  solicitudes     SolicitudSaldo[]
  transferencias  Transferencia[]
  historialSaldos HistorialSaldo[]
  detallesCuadre  DetalleCuadreCaja[]

  @@index([codigo])
  @@index([activo])
}

// ============================
// Modelos de saldos y movimientos
// ============================

model Saldo {
  id                String   @id @default(uuid())
  punto_atencion_id String
  moneda_id         String
  cantidad          Decimal  @default(0) @db.Decimal(15, 2)
  billetes          Int      @default(0)
  monedas_fisicas   Int      @default(0)
  updated_at        DateTime @updatedAt

  // Relaciones
  puntoAtencion PuntoAtencion @relation(fields: [punto_atencion_id], references: [id], onDelete: Cascade)
  moneda        Moneda        @relation(fields: [moneda_id], references: [id], onDelete: Cascade)

  @@unique([punto_atencion_id, moneda_id])
  @@index([punto_atencion_id])
  @@index([moneda_id])
}

model HistorialSaldo {
  id                    String         @id @default(uuid())
  punto_atencion_id     String
  moneda_id             String
  usuario_id            String
  cantidad_anterior     Decimal        @db.Decimal(15, 2)
  cantidad_incrementada Decimal        @db.Decimal(15, 2)
  cantidad_nueva        Decimal        @db.Decimal(15, 2)
  tipo_movimiento       TipoMovimiento
  fecha                 DateTime       @default(now())
  descripcion           String?
  numero_referencia     String?

  // Relaciones
  puntoAtencion PuntoAtencion @relation(fields: [punto_atencion_id], references: [id], onDelete: Cascade)
  moneda        Moneda        @relation(fields: [moneda_id], references: [id], onDelete: Cascade)
  usuario       Usuario       @relation(fields: [usuario_id], references: [id], onDelete: Cascade)

  @@index([punto_atencion_id])
  @@index([fecha])
  @@index([tipo_movimiento])
}

// ============================
// Modelos de operaciones
// ============================

model CambioDivisa {
  id                String            @id @default(uuid())
  fecha             DateTime          @default(now())
  monto_origen      Decimal           @db.Decimal(15, 2)
  monto_destino     Decimal           @db.Decimal(15, 2)
  tasa_cambio       Decimal           @db.Decimal(10, 6)
  tipo_operacion    TipoOperacion
  moneda_origen_id  String
  moneda_destino_id String
  usuario_id        String
  punto_atencion_id String
  observacion       String?
  numero_recibo     String?           @unique
  estado            EstadoTransaccion @default(COMPLETADO)

  // Relaciones
  monedaOrigen  Moneda        @relation("MonedaOrigen", fields: [moneda_origen_id], references: [id], onDelete: Restrict)
  monedaDestino Moneda        @relation("MonedaDestino", fields: [moneda_destino_id], references: [id], onDelete: Restrict)
  usuario       Usuario       @relation(fields: [usuario_id], references: [id], onDelete: Restrict)
  puntoAtencion PuntoAtencion @relation(fields: [punto_atencion_id], references: [id], onDelete: Restrict)

  @@index([fecha])
  @@index([punto_atencion_id])
  @@index([usuario_id])
}

model Transferencia {
  id                      String              @id @default(uuid())
  origen_id               String?
  destino_id              String
  moneda_id               String
  monto                   Decimal             @db.Decimal(15, 2)
  tipo_transferencia      TipoTransferencia
  estado                  EstadoTransferencia @default(PENDIENTE)
  solicitado_por          String
  aprobado_por            String?
  rechazado_por           String?
  fecha                   DateTime            @default(now())
  fecha_aprobacion        DateTime?
  fecha_rechazo           DateTime?
  descripcion             String?
  numero_recibo           String?             @unique
  observaciones_aprobacion String?

  // Relaciones
  origen             PuntoAtencion? @relation("TransferenciasOrigen", fields: [origen_id], references: [id], onDelete: SetNull)
  destino            PuntoAtencion  @relation("TransferenciasDestino", fields: [destino_id], references: [id], onDelete: Restrict)
  moneda             Moneda         @relation(fields: [moneda_id], references: [id], onDelete: Restrict)
  usuarioSolicitante Usuario        @relation("UsuarioSolicitante", fields: [solicitado_por], references: [id], onDelete: Restrict)
  usuarioAprobador   Usuario?       @relation("UsuarioAprobador", fields: [aprobado_por], references: [id], onDelete: SetNull)
  usuarioRechazador  Usuario?       @relation("UsuarioRechazador", fields: [rechazado_por], references: [id], onDelete: SetNull)

  @@index([fecha])
  @@index([estado])
  @@index([destino_id])
}

model Movimiento {
  id                String         @id @default(uuid())
  tipo              TipoMovimiento
  monto             Decimal        @db.Decimal(15, 2)
  moneda_id         String
  usuario_id        String
  punto_atencion_id String
  fecha             DateTime       @default(now())
  descripcion       String?
  numero_recibo     String?        @unique

  // Relaciones
  moneda        Moneda        @relation(fields: [moneda_id], references: [id], onDelete: Restrict)
  usuario       Usuario       @relation(fields: [usuario_id], references: [id], onDelete: Restrict)
  puntoAtencion PuntoAtencion @relation(fields: [punto_atencion_id], references: [id], onDelete: Restrict)

  @@index([fecha])
  @@index([punto_atencion_id])
}

// ============================
// Modelo para recibos
// ============================

model Recibo {
  id                String     @id @default(uuid())
  numero_recibo     String     @unique
  tipo_operacion    TipoRecibo
  referencia_id     String
  usuario_id        String
  punto_atencion_id String
  fecha             DateTime   @default(now())
  datos_operacion   Json
  impreso           Boolean    @default(false)
  numero_copias     Int        @default(2)

  // Relaciones
  usuario       Usuario       @relation(fields: [usuario_id], references: [id], onDelete: Restrict)
  puntoAtencion PuntoAtencion @relation(fields: [punto_atencion_id], references: [id], onDelete: Restrict)

  @@index([fecha])
  @@index([numero_recibo])
  @@index([tipo_operacion])
}

// ============================
// Modelos de gesti√≥n
// ============================

model SolicitudSaldo {
  id                String    @id @default(uuid())
  punto_atencion_id String
  usuario_id        String
  moneda_id         String
  monto_solicitado  Decimal   @db.Decimal(15, 2)
  aprobado          Boolean   @default(false)
  fecha_solicitud   DateTime  @default(now())
  fecha_respuesta   DateTime?
  observaciones     String?

  // Relaciones
  puntoAtencion PuntoAtencion @relation(fields: [punto_atencion_id], references: [id], onDelete: Cascade)
  usuario       Usuario       @relation(fields: [usuario_id], references: [id], onDelete: Cascade)
  moneda        Moneda        @relation(fields: [moneda_id], references: [id], onDelete: Cascade)

  @@index([fecha_solicitud])
  @@index([aprobado])
}

model Jornada {
  id                String    @id @default(uuid())
  usuario_id        String
  punto_atencion_id String
  fecha_inicio      DateTime  @default(now())
  fecha_almuerzo    DateTime?
  fecha_regreso     DateTime?
  fecha_salida      DateTime?
  ubicacion_inicio  Json?
  ubicacion_salida  Json?
  estado            EstadoJornada @default(ACTIVO)

  // Relaciones
  usuario       Usuario       @relation(fields: [usuario_id], references: [id], onDelete: Cascade)
  puntoAtencion PuntoAtencion @relation(fields: [punto_atencion_id], references: [id], onDelete: Cascade)

  @@index([usuario_id])
  @@index([fecha_inicio])
  @@index([punto_atencion_id])
}

model SalidaEspontanea {
  id                 String            @id @default(uuid())
  usuario_id         String
  punto_atencion_id  String
  motivo             MotivoSalida
  descripcion        String?
  fecha_salida       DateTime          @default(now())
  fecha_regreso      DateTime?
  ubicacion_salida   Json?
  ubicacion_regreso  Json?
  duracion_minutos   Int?
  aprobado_por       String?
  estado             EstadoSalida      @default(ACTIVO)
  created_at         DateTime          @default(now())
  updated_at         DateTime          @updatedAt

  // Relaciones
  usuario           Usuario        @relation(fields: [usuario_id], references: [id], onDelete: Cascade)
  puntoAtencion     PuntoAtencion  @relation(fields: [punto_atencion_id], references: [id], onDelete: Cascade)
  usuarioAprobador  Usuario?       @relation("UsuarioAprobadorSalida", fields: [aprobado_por], references: [id], onDelete: SetNull)

  @@index([usuario_id])
  @@index([punto_atencion_id])
  @@index([fecha_salida])
  @@index([estado])
}

model CuadreCaja {
  id                           String       @id @default(uuid())
  usuario_id                   String
  punto_atencion_id            String
  fecha                        DateTime     @default(now())
  estado                       EstadoCierre @default(ABIERTO)
  total_cambios                Int          @default(0)
  total_transferencias_entrada Int          @default(0)
  total_transferencias_salida  Int          @default(0)
  fecha_cierre                 DateTime?
  observaciones                String?

  // Relaciones
  usuario       Usuario             @relation(fields: [usuario_id], references: [id], onDelete: Restrict)
  puntoAtencion PuntoAtencion       @relation(fields: [punto_atencion_id], references: [id], onDelete: Restrict)
  detalles      DetalleCuadreCaja[]

  @@index([fecha])
  @@index([punto_atencion_id])
}

model DetalleCuadreCaja {
  id              String  @id @default(uuid())
  cuadre_id       String
  moneda_id       String
  saldo_apertura  Decimal @db.Decimal(15, 2)
  saldo_cierre    Decimal @db.Decimal(15, 2)
  conteo_fisico   Decimal @db.Decimal(15, 2)
  billetes        Int     @default(0)
  monedas_fisicas Int     @default(0)
  diferencia      Decimal @default(0) @db.Decimal(15, 2)

  // Relaciones
  cuadre CuadreCaja @relation(fields: [cuadre_id], references: [id], onDelete: Cascade)
  moneda Moneda     @relation(fields: [moneda_id], references: [id], onDelete: Restrict)

  @@unique([cuadre_id, moneda_id])
}

// ============================
// Enums
// ============================

enum RolUsuario {
  SUPER_USUARIO
  ADMIN
  OPERADOR
  CONCESION
}

enum TipoMovimiento {
  INGRESO
  EGRESO
  TRANSFERENCIA_ENTRANTE
  TRANSFERENCIA_SALIENTE
  CAMBIO_DIVISA
}

enum TipoOperacion {
  COMPRA
  VENTA
}

enum TipoTransferencia {
  ENTRE_PUNTOS
  DEPOSITO_MATRIZ
  RETIRO_GERENCIA
  DEPOSITO_GERENCIA
}

enum EstadoTransferencia {
  PENDIENTE
  APROBADO
  RECHAZADO
}

enum EstadoTransaccion {
  COMPLETADO
  PENDIENTE
  CANCELADO
}

enum EstadoCierre {
  ABIERTO
  CERRADO
}

enum TipoRecibo {
  CAMBIO_DIVISA
  TRANSFERENCIA
  MOVIMIENTO
  DEPOSITO
  RETIRO
}

enum EstadoJornada {
  ACTIVO
  COMPLETADO
  CANCELADO
}

enum MotivoSalida {
  BANCO
  DILIGENCIA_PERSONAL
  TRAMITE_GOBIERNO
  EMERGENCIA_MEDICA
  OTRO
}

enum EstadoSalida {
  ACTIVO
  COMPLETADO
  CANCELADO
}
