import { generateTransferReport } from "./report-transfer-issues.js";
import { fixHistoricalTransfers } from "./fix-historical-transfers.js";
import logger from "../utils/logger.js";
/**
 * Men√∫ interactivo para manejar la correcci√≥n de transferencias hist√≥ricas
 */
function mostrarMenu() {
    console.log("\nüîß HERRAMIENTAS DE CORRECCI√ìN DE TRANSFERENCIAS");
    console.log("=".repeat(50));
    console.log("1. üìã Generar reporte (solo an√°lisis, sin cambios)");
    console.log("2. üîß Corregir transferencias hist√≥ricas");
    console.log("3. ‚ùå Salir");
    console.log("=".repeat(50));
}
async function ejecutarOpcion(opcion) {
    switch (opcion.trim()) {
        case "1":
            logger.info("üìã Ejecutando reporte de an√°lisis...");
            await generateTransferReport();
            return true;
        case "2":
            logger.info("üîß Ejecutando correcci√≥n de transferencias hist√≥ricas...");
            logger.warn("‚ö†Ô∏è ATENCI√ìN: Esta operaci√≥n modificar√° la base de datos");
            logger.warn("‚ö†Ô∏è Se recomienda hacer un backup antes de continuar");
            // En un entorno real, aqu√≠ podr√≠as pedir confirmaci√≥n
            await fixHistoricalTransfers();
            return true;
        case "3":
            logger.info("üëã Saliendo...");
            return false;
        default:
            logger.warn("‚ùå Opci√≥n no v√°lida. Por favor seleccione 1, 2 o 3.");
            return true;
    }
}
async function main() {
    try {
        logger.info("üöÄ Iniciando herramientas de correcci√≥n de transferencias");
        // Por ahora ejecutamos directamente el reporte
        // En un entorno interactivo podr√≠as usar readline para el men√∫
        logger.info("üìã Ejecutando reporte de an√°lisis autom√°ticamente...");
        await generateTransferReport();
        logger.info("\nüí° Para ejecutar la correcci√≥n, use:");
        logger.info("   npm run fix-transfers");
    }
    catch (error) {
        logger.error("üí• Error en las herramientas de correcci√≥n", {
            error: error instanceof Error ? error.message : "Unknown error",
        });
        throw error;
    }
}
// Ejecutar solo si se llama directamente
if (require.main === module) {
    main()
        .then(() => {
        logger.info("‚úÖ Herramientas completadas");
        process.exit(0);
    })
        .catch((error) => {
        logger.error("‚ùå Herramientas fallaron", { error });
        process.exit(1);
    });
}
export { main };
