#!/bin/bash
set -e

echo "üöÄ ====== DEPLOY A PRODUCCI√ìN ======"
echo ""

# 1. Pull c√≥digo
echo "1Ô∏è‚É£  Actualizar c√≥digo..."
git pull origin main || { echo "‚ùå Error en git pull"; exit 1; }

# 2. Instalar dependencias
echo "2Ô∏è‚É£  Instalar dependencias..."
npm install --production || { echo "‚ùå Error en npm install"; exit 1; }

# 3. Generar Prisma client
echo "3Ô∏è‚É£  Generar Prisma Client..."
npx prisma generate --schema=prisma/schema.prisma || { echo "‚ùå Error en prisma generate"; exit 1; }

# 4. LIMPIAR CACHE DE BUILD (crucial para TypeScript)
echo "4Ô∏è‚É£  Limpiar caches de build..."
rm -f tsconfig.server.tsbuildinfo
rm -f tsconfig.app.tsbuildinfo
rm -rf dist/
rm -rf dist-server/
echo "‚úÖ Caches limpiados"

# 5. Build frontend
echo "5Ô∏è‚É£  Compilar frontend..."
npm run build:frontend || { echo "‚ùå Error en build:frontend"; exit 1; }

# 6. Build backend (ahora sin cache)
echo "6Ô∏è‚É£  Compilar backend..."
npm run build:server || { echo "‚ùå Error en build:server"; exit 1; }

# 7. Verificar que existen archivos compilados
echo "7Ô∏è‚É£  Verificar compilaci√≥n..."
if [ ! -f "dist-server/server/index.js" ]; then
  echo "‚ùå dist-server/server/index.js NO EXISTE!"
  exit 1
fi
JS_COUNT=$(find dist-server -name "*.js" | wc -l)
echo "‚úÖ Compilaci√≥n OK ($JS_COUNT archivos .js)"

# 8. Ejecutar migraciones si es necesario
echo "8Ô∏è‚É£  Verificar estado de BD..."
npx prisma db push --skip-generate --skip-validate || { echo "‚ö†Ô∏è  Migraci√≥n opcional"; }

# 9. Reiniciar PM2
echo "9Ô∏è‚É£  Reiniciar servidor PM2..."
pm2 stop punto-cambio-api || true
pm2 delete punto-cambio-api || true
pm2 start ecosystem.config.cjs --env production
pm2 save

# 10. Verificar logs
echo "üîü Esperando logs..."
sleep 3
pm2 logs punto-cambio-api --lines 20 --nostream

echo ""
echo "‚úÖ ====== DEPLOY COMPLETADO ======"