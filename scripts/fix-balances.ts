#!/usr/bin/env tsx

/**
 * Script Maestro para Correcci√≥n de Balances
 *
 * Ejecuta el proceso completo de correcci√≥n de balances:
 * 1. Validaci√≥n inicial
 * 2. Generaci√≥n de reporte de auditor√≠a
 * 3. Rec√°lculo y correcci√≥n de balances
 * 4. Validaci√≥n final
 */

import { execSync } from "child_process";
import { existsSync, mkdirSync } from "fs";
import { join } from "path";

async function main() {
  console.log("üöÄ INICIANDO PROCESO DE CORRECCI√ìN DE BALANCES");
  console.log("=".repeat(80));
  console.log("Este proceso realizar√° los siguientes pasos:");
  console.log("1. ‚úÖ Validaci√≥n inicial de balances");
  console.log("2. üìã Generaci√≥n de reporte de auditor√≠a");
  console.log("3. üîÑ Rec√°lculo y correcci√≥n de balances");
  console.log("4. ‚úÖ Validaci√≥n final");
  console.log("=".repeat(80));

  // Crear directorio de reportes si no existe
  const reportsDir = join(process.cwd(), "reports");
  if (!existsSync(reportsDir)) {
    mkdirSync(reportsDir, { recursive: true });
    console.log("üìÅ Directorio de reportes creado");
  }

  try {
    // Paso 1: Validaci√≥n inicial
    console.log("\nüîç PASO 1: VALIDACI√ìN INICIAL");
    console.log("-".repeat(50));

    try {
      execSync("tsx scripts/validate-balances.ts", {
        stdio: "inherit",
        cwd: process.cwd(),
      });
    } catch (error) {
      console.log(
        "‚ö†Ô∏è  Validaci√≥n inicial completada con inconsistencias detectadas"
      );
    }

    // Pausa para que el usuario pueda revisar
    console.log(
      "\n‚è∏Ô∏è  Presiona ENTER para continuar con el reporte de auditor√≠a..."
    );
    process.stdin.setRawMode(true);
    process.stdin.resume();
    await new Promise((resolve) => process.stdin.once("data", resolve));
    process.stdin.setRawMode(false);
    process.stdin.pause();

    // Paso 2: Reporte de auditor√≠a
    console.log("\nüìã PASO 2: GENERACI√ìN DE REPORTE DE AUDITOR√çA");
    console.log("-".repeat(50));

    execSync("tsx scripts/balance-audit-report.ts", {
      stdio: "inherit",
      cwd: process.cwd(),
    });

    // Pausa para que el usuario pueda revisar los reportes
    console.log('\n‚è∏Ô∏è  Revisa los reportes generados en la carpeta "reports".');
    console.log(
      "   Presiona ENTER para continuar con la correcci√≥n de balances..."
    );
    process.stdin.setRawMode(true);
    process.stdin.resume();
    await new Promise((resolve) => process.stdin.once("data", resolve));
    process.stdin.setRawMode(false);
    process.stdin.pause();

    // Paso 3: Rec√°lculo de balances
    console.log("\nüîÑ PASO 3: REC√ÅLCULO Y CORRECCI√ìN DE BALANCES");
    console.log("-".repeat(50));
    console.log(
      "‚ö†Ô∏è  ATENCI√ìN: Este paso modificar√° los balances en la base de datos."
    );
    console.log("   ¬øEst√°s seguro de que quieres continuar? (y/N): ");

    process.stdin.setRawMode(true);
    process.stdin.resume();
    const confirmation = await new Promise<string>((resolve) => {
      process.stdin.once("data", (data) => {
        const key = data.toString().toLowerCase();
        resolve(key);
      });
    });
    process.stdin.setRawMode(false);
    process.stdin.pause();

    if (confirmation.trim() === "y") {
      console.log("\nüîÑ Ejecutando rec√°lculo de balances...");
      execSync("tsx scripts/recalculate-balances.ts", {
        stdio: "inherit",
        cwd: process.cwd(),
      });
    } else {
      console.log("\n‚ùå Rec√°lculo cancelado por el usuario.");
      console.log(
        '   Los reportes de auditor√≠a est√°n disponibles en la carpeta "reports".'
      );
      return;
    }

    // Paso 4: Validaci√≥n final
    console.log("\n‚úÖ PASO 4: VALIDACI√ìN FINAL");
    console.log("-".repeat(50));

    execSync("tsx scripts/validate-balances.ts", {
      stdio: "inherit",
      cwd: process.cwd(),
    });

    // Resumen final
    console.log("\n" + "=".repeat(80));
    console.log("üéâ PROCESO DE CORRECCI√ìN COMPLETADO");
    console.log("=".repeat(80));
    console.log("‚úÖ Validaci√≥n inicial ejecutada");
    console.log("‚úÖ Reporte de auditor√≠a generado");
    console.log("‚úÖ Balances recalculados y corregidos");
    console.log("‚úÖ Validaci√≥n final ejecutada");
    console.log('\nüìÅ Los reportes est√°n disponibles en la carpeta "reports"');
    console.log("üìä Revisa los archivos CSV y JSON para an√°lisis detallado");

    console.log("\nüîç PR√ìXIMOS PASOS RECOMENDADOS:");
    console.log("1. Revisar los reportes de auditor√≠a generados");
    console.log("2. Verificar algunos balances manualmente en la aplicaci√≥n");
    console.log("3. Hacer commit de los cambios si todo est√° correcto");
    console.log("4. Hacer push al servidor y pull en producci√≥n");
  } catch (error) {
    console.error("\n‚ùå Error durante el proceso de correcci√≥n:", error);
    console.log("\nüîß ACCIONES RECOMENDADAS:");
    console.log("1. Revisar los logs de error arriba");
    console.log("2. Verificar la conexi√≥n a la base de datos");
    console.log("3. Asegurarse de que todas las dependencias est√°n instaladas");
    console.log(
      "4. Ejecutar los scripts individuales para identificar el problema"
    );
    process.exit(1);
  }
}

// Ejecutar el script
if (import.meta.url === `file://${process.argv[1]}`) {
  main().catch(console.error);
}
